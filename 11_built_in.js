"use strict";
// Встроенные типы данных. В JavaScript существует много встроенных классов имеющих свой тип для объектов. Среди них: Дата, регулярные выражения, DomЭлементы(HTMLElement), Map, Set, Promis.
// объект Date
let date = new Date();
// Если навести стрелку мыши на переменную date, то во вплывающей подсказке мы увидим что она имеет тип Date.
let date2 = new Date(2024, 0, 29);
// Регулярное выражение
let reg = new RegExp('.+?');
// Если навести стрелку мыши на переменную reg, то во вплывающей подсказке мы увидим что она имеет тип RegExp. Укажем его вручную.
let reg2 = new RegExp('.+?');
// DomЭлементы
// Все HTMLElement`ы являются производными от HTMLElement.
let elem = document.querySelector('div');
// Если навести стрелку мыши на переменную elem, то во вплывающей подсказке мы увидим что она имеет тип HTMLDivElement | null.
// Пропишем его вручную:
let div = document.querySelector('div');
// console.dir(div);
// Задача: Создать переменную в которой будет находится Promise
let prom = new Promise((res, rej) => {
    res('ok');
});
prom.then(res => res);
// Если навести стрелку мыши на переменную prom, то во вплывающей подсказке мы увидим что она имеет тип Promise<unknown>. Укажем его вручную.
// вместо <unknown> пропишем <string>, т.к. функция res, в нашем случае возвращает строку.
let prom2 = new Promise((res, rej) => {
    let err = true;
    if (!err) {
        res('ok');
    }
    else {
        rej('error');
    }
});
prom2.then(res => cl(res)).catch(err => cl(err));
function cl(data) {
    console.log(typeof data, ' ', data);
}
// В угловых скобках "<>" мы указывает типо возращаемого значения. (То, что нам вернёт функция res) Тип возращаемого значения функции rej указывать не обязательлно.
//===========================================================================================================================================
// HTLMElement
// Создать переменную содержащую ссылку на параграф.
let domelem = document.createElement('p');
// Создать переменную содержащую ссылку на ненумерованный список.
let ul = document.createElement('ul');
//===========================================================================================================================================
// Collection 
//(HTMLCollection) В typeScript есть возможность работать с коллекциями DOM элементов.
let lst = document.querySelectorAll('.cl');
let lst2 = document.getElementsByClassName('.cl');
console.dir(lst); // NodeList
console.dir(lst2); // HTMLCollection
//===========================================================================================================================================
// Map
let map0 = new Map();
// Если навести стрелку мыши на переменную map0, то во вплывающей подсказке мы увидим что она имеет тип Map <any, any>. Это означает что ключём и значением может быть любой тип данных. Укажем его вручную.
let map = new Map(); // подобной записью мы ограничиваем тип ключа string, а тип значения number.
map.set('строка1', 1);
map.set('строка2', 2);
console.log(map);
console.log(map.size);
//============================================================================================================================================
//Set
let set0 = new Set();
// Если навести стрелку мыши на переменную set0, то во вплывающей подсказке мы увидим что она имеет тип Set<unknown>. Это означает что тип данных, которые будут храниться в уникальной коллекции не определён. Укажем его вручную.
let set = new Set(); // Теперь в нашей уникальной коллекции могут храниться либо строки, либо числовые массивы.
set.add('a');
set.add([1, 2, 3]);
console.log(set);
